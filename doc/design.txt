$Id$

Author: Deneys S. Maartens

<FIXME: add title intro text>

Multi-Gee object:

The central purpose of the library is to capture video images [*],
therefore the central function is the mg_capture function.  This
requires a capture device [*], or devices and a method to pass the
captured images to the user's control.  A method to pass the control
back to the user temporarily is a callback [*] function.  This function
is called by the library when a synchronised sequence of frames are
available.  When this function returns the next set of images are
captured.  A way to abort the capturing process in mid stride is needed
[*], as well as a method to prevent the user from starting a second
capture operation while one is already active [*].

From this we can see the need for:

- storage for a number of images
- a number of devices
- a callback function
- a method to abort the capture process
- a indicator that the capture process is active

A number of devices and a number of frames must be kept track of.  A
simple way to do this is to pack them into a list [*].  The images are
transient and are only needed for the call to the callback function, so
it is not required to have persistent storage for them.

We need a primary object (multi_gee), which needs the following members:

- device list
- callback function
- halt indicator
- busy indicator

A number of operations on the multi_gee object and the members thereof
are required:

- register a device (mg_register_device)
- unregister a device (called deregistering) (mg_deregister_device)
- initiate the capture (mg_capture)
- set the capture halt indicator (mg_capture_halt)
- register a callback function (mg_register_callback)

The object methodology also dictates the following methods:

- create a multi_gee object
- destroy a multi_gee object

We have also identified the following ancillary objects, during the
discussion above:

- a device (mg_device)
- a frame (mg_frame)
- list (sllist)


The device object:

A number of attributes of a file need to be stored:

- the filename
- the file descriptor (after it has been opened)
- the device major number
- the device minor number

The file descriptor is a unique identifier for each file, therefore it
can be used as the device identifier.

A number of methods are required to operate the device:

- create device object
- destroy device object
- get the device major number
- get the device minor number
- open the device (sets the file descriptor)
- get the file descriptor

The create method takes the filename of the device as argument.


The frame object:

The frame object serves as storage for a single image frame.  The
attributes of the frame are:

- the capturing device identifier
- the image
- a timestamp when the image was captured
- a sequence number

Methods required for this object are the following:

- create a frame object
- destroy a frame object
- get the image
- get the timestamp
- get the sequence number

The create method for this object takes the image, timestamp and the
sequence number.


The list:

Multiple objects can be chained together using a list.  The minimum
requirement is for the list to be singly linked, as ordering, object
insertion and object removal is not of prime concern.  The list requires
the following members:

- a pointer to the next list item
- a pointer to data

The only publicly available methods need be to:

- insert a data item into a list
- remove a data item from the list
- get the next item in the list
- get access to an item's data
- empty the list

The methods to create and destroy does not need to be public, as the
method to create, or destroy, a list object can be called by the methods
that insert, or remove, a data item into a list, or from the list.

