$Id$

multi-gee Frame Grabber Library API
-----------------------------------

Version: 0.5
Author: Deneys S. Maartens


Introduction
============

The aim of this document is to describe the image acquisition software from
the view of a developer planning to integrate this image acquisition library
into custom software.

The implementation of the library is based around the concept of C-style
private objects.  This approach makes heavy use of object handles in the form
of structure pointers.  No direct access to the actual members of the
structure is available, and usage of the object is limited to functions that
operate on the structure.  It is therefore necessary to do a function call to
create an object, so it can be used, and destroy the object when it's of no
further use.  Please refer to ``Writing Bug-Free C Code -- A Programming Style
That Automatically Detects Bugs in C Code'' by Jerry Jongerius, January 1995.
It is available as an online resource at http://www.duckware.com/bugfreec/.


Example Usage
-------------

The order of steps to capture a video stream is as follows:

    - register a user-defined callback function
    - register capture devices
    - call capture function
    - deregister capture devices

In the callback function additional options exist:

    - register additional capture devices
    - deregister any or all capture devices
    - register a different callback function
    - abort the video acquisition in progress

An example code segment illustrating the typical work routine:

    0   // create object handle
    1   multi_gee_t mg = mg_create("stderr");
    2
    3   // register callback function
    4   mg_register_callback(mg, user_def_callback)
    5
    6   // register devices
    7   for (int i = 0; i < N /* devices */; ++i)
    8       dev_id[i] = mg_register_device(mg, "device filename i")
    9
    10   // capture synced sets of images
    11  mg_capture(mg, -1); // calls callback() with synced frames
    12
    13  for (int i = 0; i < M /* devices */; ++i)
    14      mg_deregister_device(dev_id[i])
    15
    16  // we're done, destroy handle
    17  mg_destroy(mg);

In the code segment above, a object handle is created with a call to
mg_create() in Line 1, and the user-defined callback function is registered by
the mg_register_callback() function call in Line 4.  A number of capture
devices (N) is registered in the for loop (Line 7).  The capture is initiated
by the mg_capture() function call in Line 11.  After the capture is finished
the devices are deregistered in the for loop (Line 13).  The object handle is
destroyed then in Line 17.

The values of the variables N and M need not be the same.  The valid range of
values for N is [1..n] and M is [0..n].  In theory, the maximum number of
devices that can be registered is not constrained.

A code segment illustrating a typical user defined callback function:

    1   void user_def_callback(multi_gee_t multi_gee,
    2                          sllist_t frame_list)
    3   {
    4       for (sllist_t f = frame_list; f; f = sll_next(f)) {
    5           mg_frame_t frame = sll_data(f);
    6
    7           /* user defined image processing goes here */
    8
    9       }
    10  }

The for loop at Line 4 loops over all captured frames.  For each captured
frame in the list, the frame object handle is retrieved at line 5.  This
object handle can now be used to create a copy of the image data, or to do
whatever image processing is required.

Discussion of function calls
============================

The callback function
---------------------

The callback function prototype is as follows:

    void user_def_callback(multi_gee_t capture_object,
                           sllist_t frame_list);

With the following data contained in any particular frame object:

    - the capturing device object handle
    - a pointer to the image data
    - the image time stamp
    - the image sequence number

The user-defined callback function is called whenever a synchronised set of
images has been captured.  The callback function is called with a linked list
of frames.  Each frame contains the object handle of the capturing device, a
pointer to the image, the time stamp of the image, a sequence counter for the
image.

Note that the first images captured may contain image-frames where the odd and
even fields are swapped.  This is a hardware artifact that is caused when the
frame grabber tries to get in sync with the video source.  It is customary to
ignore the first few frames when commencing a capture.

Note that the frames in the frame_list is in no particular order.


Function reference
------------------

- int mg_capture(multi_gee_t multi_gee /* object handle */,
                 int n)

The mg_capture() function will call the callback function a number of times,
which is specified by the parameter n, and will provide the callback function
with a synchronised set of frames at each call.

If n < 0, frames will be captured indefinitely.  To stop this capture stream
the callback() function either needs to deregister all devices, or call
mg_capture_halt().

If n = 0, mg_capture() will return immediately without capturing any frames.
This can be used to test whether any devices have been registered by examining
the return value.

The return value indicates the cause for the end of capturing.  An exit code
of >= 0 indicates the number of frames has been successfully acquired and that
the operation completed successfully.  An exit status of -1 indicates that a
call to mg_capture_halt() has been done.  A return value of -2 indicates that
no devices are registered to capture with.  This situation could develop when
all the devices are deregistered during the course of a grab session, or if no
devices have been registered before the call to mg_capture() is performed.  An
exit code of -3 indicates that a call to mg_capture() has been done while a
call to mg_capture() was in progress, while an exit code of -4 indicates that
the grabbing has been aborted because the sync between the devices could not
be established, or could not be recovered within 3 frames after the sync had
been lost.  The user can differentiate between these two alternatives by
keeping track of the number of calls to the the callback function.  An exit
code of -5 exit code indicates that a noindicates that a no callback function
has been registered.


- void mg_capture_halt(multi_gee_t multi_gee)

This function will cause acquisition to halt while the capturing is in
progress, otherwise will have no effect.


- int mg_register_callback(multi_gee_t multi_gee,
                           void (*callback)(struct frame* frame_list))

The mg_register_callback() function registers a user-defined callback
function.  This function will be called each time a set of synced frames is
available.  A call to this function can be performed at any time.  If this
call happens multiple times, the function specified as argument to the last
call performed will be registered as the active callback function.

The return value indicates whether the call has completed successfully or not.
A return value of 0 indicates success, while a return value of -1 indicates
that the registration of the callback function has failed.


- int mg_register_device(multi_gee_t multi_gee,
                         const char * filename)

The function is used to register an unregistered device.  This call can happen
at any point in time, even after capturing has started.  The next call of the
callback() function will include a frame captured by this device.  Note that
one or more frame cycles may pass before the next call to the callback
function.  This is due to the fact that the callback function is only called
when a set of synchronised frames is available.

This function checks the major and minor number of the device in order to
prevent multiple opens of the same device using multiple filenames.

It returns the device identifier on success.  The identifier is a number
greater or equal to zero.  The value -1 indicates a failure to register the
device.

Multiple calls to mg_register_device() specifying the same device will return
the same device identifier for each call to the function.


- int mg_deregister_device(multi_gee_t multi_gee,
                           int device_id)

This function will deregister a registered device.  A call to the function can
happen at any point in time, even before capturing has ended.  The next call
of the callback() function will not include a frame from this device.  A
device_id of -1 will cause all registered devices to be deregistered.

The function returns a status value, of 0 or a positive integer for success
and indicates the number of remaining registered devices, while a return value
of -1 indicates failure.


FrameGrabber Setup
------------------

A video4linux2 supported framegrabber is required, as the v4l2 API is used.
The multi-gee library also requires that the framegrabber have the capability
to do streaming IO.

When setting up the frame grabber, a number of parameters can be modified,
such as the frame dimensions and the colour depth.  These parameters have been
hardcoded for this implementation, and can be found if the fg_utils.c and
fg_utils.h files.  The default image values in terms of the Video4Linux2
parameters are:

    Input:
        index = 1; // Composite 1
    Standard:
        std = V4L2_STD_PAL;
    Format:
        width = 768;
        height = 576;
        pixelformat = V4L2_PIX_FMT_GREY;
        field = V4L2_FIELD_INTERLACED;


Change Log
==========

* Fri Mar 18 2005 Deneys S. Maartens <dsm@tlabs.ac.za>
- Reword the private structure library slightly

* Mon Mar 14 2005 Deneys S. Maartens <dsm@tlabs.ac.za>
- Add example section for callback function
- Document hardcoded values

* Mon Dec 20 2004 Deneys S. Maartens <dsm@tlabs.ac.za>
- Modify function prototypes to include an object handle
- Change example to include creation and destruction of object handle

* Tue Nov 23 2004 Deneys S. Maartens <dsm@tlabs.ac.za>
- Minor changes to text

* Fri Nov 05 2004 Deneys S. Maartens <dsm@tlabs.ac.za>
- Add introduction section
- Change wording in many paragraphs

* Wed Nov 03 2004 Deneys S. Maartens <dsm@tlabs.ac.za>
- Expand some of the function descriptions
- Add the callback function section
- Expand the example usage section.  Add line numbers to the code
  segment

* Mon Nov 01 2004 Deneys S. Maartens <dsm@tlabs.ac.za>
- Initial version of text file

 vim:textwidth=78:
